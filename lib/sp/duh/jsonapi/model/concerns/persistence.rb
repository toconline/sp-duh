module SP
  module Duh
    module JSONAPI
      module Model
        module Concerns
          module Persistence
            extend ::ActiveSupport::Concern

            included do

              class_attribute :schema, instance_writer: false
              class_attribute :prefix, instance_writer: false

              class_attribute :resource_name

              class_attribute :autogenerated_id
              self.autogenerated_id = true

              attr_accessible :id

            end

            module ClassMethods

              def find!(id) ; get(id) ; end

              def find(id)
                begin
                  get(id)
                rescue Exception => e
                  nil
                end
              end

              def query!(condition) ; get_all(condition) ; end

              def query(condition)
                begin
                  get_all(condition)
                rescue Exception => e
                  nil
                end
              end

              def first!(condition = "")
                get_all(condition).first
              end

              def first(condition = "")
                begin
                  get_all(condition).first
                rescue Exception => e
                  nil
                end
              end

              def all! ; get_all("") ; end

              def all
                begin
                  get_all("")
                rescue Exception => e
                  nil
                end
              end

            private

              def get(id)
                result = JSONAPI.proxy.get!(self.schema.to_s, self.prefix.to_s, "#{self.resource_name}/#{id.to_s}")
                result = result[:data]
                jsonapi_result_to_instance(result)
              end

              def get_all(condition)
                got = []
                result = JSONAPI.proxy.get!(self.schema.to_s, self.prefix.to_s, "#{self.resource_name}", condition)
                result = result[:data]
                if result
                  got = result.map do |item|
                    jsonapi_result_to_instance(item)
                  end
                end
                got
              end

              def jsonapi_result_to_instance(result)
                if result
                  instance = self.new(result.merge(result[:attributes]).except(:attributes))
                  instance.send :_data=, result
                end
                instance
              end

            end

            def new_record?
              if self.class.autogenerated_id || self.id.nil?
                self.id.nil?
              else
                self.class.find(self.id).nil?
              end
            end

            def save!
              if new_record?
                create!
              else
                update!
              end
            end

            def destroy!
              if !new_record?
                result = JSONAPI.proxy.delete!(self.class.schema.to_s, self.class.prefix.to_s, "#{self.class.resource_name}/#{self.id.to_s}")
              end
            end

            alias :delete! :destroy!

            def create!
              if self.class.autogenerated_id
                params = {
                  data: {
                    type: self.class.resource_name,
                    attributes: get_persistent_json.reject { |k,v| k == :id || v.nil? }
                  }
                }
              else
                params = {
                  data: {
                    type: self.class.resource_name,
                    attributes: get_persistent_json.reject { |k,v| v.nil? }
                  }
                }
              end
              result = JSONAPI.proxy.post!(self.class.schema.to_s, self.class.prefix.to_s, self.class.resource_name, params)
              # Set the id to the newly created id
              self.id = result[:data][:id]
            end

            def update!
              params = {
                data: {
                  type: self.class.resource_name,
                  id: self.id.to_s,
                  attributes: get_persistent_json.reject { |k,v| k == :id }
                }
              }
              result = JSONAPI.proxy.put!(self.class.schema.to_s, self.class.prefix.to_s, "#{self.class.resource_name}/#{self.id.to_s}", params)
            end

            def get_persistent_json
              as_json.reject { |k| !k.in?(self.class.attributes) }
            end

          protected

            attr_accessor :_data

          end
        end
      end
    end
  end
end
